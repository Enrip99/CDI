#include <iostream>
#include <string>
#include <vector>
#include <bitset>

int main(){

    struct TRIPLET {
        char paraula;
        int longitud;
        int codi;
    };

    //hardcodejem les codificacioficacions pq em fa tota la mandra lidiar amb com std::cin tracta els espais i caracters especials
    std::string codificacioPla;
    std::vector <std::string> codificaciosPlas{ 
        "[(' ', 2), (\"'\", 10), (',', 7), ('-', 6), ('.', 6), (';', 10), ('?', 9), ('A', 10), ('B', 9), ('D', 10), ('G', 10), ('H', 9), ('I', 7), ('K', 9), ('M', 9), ('T', 7), ('W', 8), ('[', 10), (']', 11), ('a', 4), ('b', 7), ('c', 6), ('d', 5), ('e', 3), ('f', 6), ('g', 8), ('h', 4), ('i', 6), ('j', 11), ('k', 8), ('l', 5), ('m', 6), ('n', 5), ('o', 4), ('p', 6), ('q', 10), ('r', 5), ('s', 5), ('t', 4), ('u', 6), ('v', 9), ('w', 6), ('y', 6)]",
        "[(' ', 2), (\"'\", 8), (',', 6), ('-', 8), ('.', 5), (';', 9), ('?', 8), ('A', 9), ('B', 8), ('C', 9), ('D', 9), ('F', 9), ('G', 9), ('H', 8), ('I', 6), ('M', 8), ('P', 9), ('S', 8), ('T', 9), ('W', 8), ('Y', 10), ('[', 10), (']', 9), ('a', 4), ('b', 7), ('c', 6), ('d', 5), ('e', 4), ('f', 6), ('g', 7), ('h', 5), ('i', 5), ('k', 7), ('l', 5), ('m', 5), ('n', 5), ('o', 5), ('p', 6), ('r', 4), ('s', 5), ('t', 4), ('u', 5), ('v', 8), ('w', 6), ('y', 6)]",
        "[(' ', 3), ('!', 8), (\"'\", 8), (',', 6), ('-', 8), ('.', 6), (';', 9), ('?', 9), ('A', 9), ('D', 9), ('E', 9), ('G', 8), ('H', 9), ('I', 6), ('M', 7), ('N', 8), ('O', 8), ('R', 9), ('T', 8), ('W', 8), ('Y', 9), ('[', 10), (']', 10), ('a', 4), ('b', 6), ('c', 6), ('d', 5), ('e', 4), ('f', 6), ('g', 6), ('h', 5), ('i', 4), ('j', 9), ('k', 6), ('l', 5), ('m', 5), ('n', 4), ('o', 4), ('p', 7), ('q', 8), ('r', 5), ('s', 4), ('t', 4), ('u', 5), ('v', 7), ('w', 5), ('y', 6)]",
        "[(' ', 2), (',', 6), ('-', 8), ('.', 6), (';', 10), ('C', 10), ('D', 10), ('G', 10), ('H', 10), ('I', 7), ('M', 10), ('N', 10), ('T', 8), ('W', 10), ('[', 10), (']', 10), ('a', 4), ('b', 7), ('c', 6), ('d', 5), ('e', 3), ('f', 6), ('g', 7), ('h', 5), ('i', 5), ('j', 9), ('k', 7), ('l', 5), ('m', 6), ('n', 4), ('o', 4), ('p', 6), ('r', 5), ('s', 5), ('t', 4), ('u', 6), ('v', 8), ('w', 6), ('y', 7)]",
        "[('A', 3), ('B', 3), ('C', 3), ('D', 3), ('E', 3), ('F', 2), ('G', 4), ('H', 4), ]"
    };
    std::vector <std::string> textosPla{
        "The Island of Doctor Moreau, by H. G. Wells [...] But I mean to do better things still. I mean to conquer that. This puma-- But that's the story. All the Kanaka boys are dead now; one fell overboard of the launch, and one died of a wounded heel that he poisoned in some way with plant-juice. Three went away in the yacht, and I suppose and hope were drowned. The other one--was killed. Well, I have replaced them. Montgomery went on much as you are disposed to do at first, and then-- What became of the other one? said I, sharply,--the other Kanaka who was killed? The fact is, after I had made a number of human creatures I made a Thing-- He hesitated.",
        "The Island of Doctor Moreau, by H. G. Wells [...] Still, I could hardly tell the man that I thought him a liar. Pointed, I said; rather small and furry,--distinctly furry. But the whole man is one of the strangest beings I ever set eyes on. A sharp, hoarse cry of animal pain came from the enclosure behind us. Its depth and volume testified to the puma. I saw Montgomery wince. Yes? he said. Where did you pick up the creature? San Francisco. He's an ugly brute, I admit. Half-witted, you know. Can't remember where he came from. But I'm used to him, you know."
    };
    std::vector <std::string> codisPla{


        "0100111001011100011101111"
    };

    //escollim quin exercici volem fer (0..3)
    int cas;
    std::cin >> cas;
    codificacioPla = codificaciosPlas[cas % codificaciosPlas.size()];

    std::vector <TRIPLET> vecTriplets; 

    //passem la codificacio a un format amb que pugui treballar
    //sense detecció d'error. Ho sento profe. T'estimo molt <3
    int llargariaMax = 0;
    char caracter;
    for (int i = 0, fase = 0, num = 0;  i < codificacioPla.size(); ++i){
        char actual = codificacioPla[i];
        switch (fase){
            case 0:
                if (actual == '(') {
                    ++fase;
                    ++i;
                }
                break;
            case 1:
                caracter = actual;
                ++fase;
                break;
            case 2:
                if (actual >= '0' and actual <= '9'){
                    ++fase;
                }
                else break;
            case 3:
            if (actual >= '0' and actual <= '9'){
                num = num * 10 + actual - '0';
            }
            else if (actual == ')'){
                vecTriplets.push_back(TRIPLET {caracter, num});
                llargariaMax = std::max(llargariaMax, num);
                num = 0;
                fase = 0;
            }
            break;
        }
    }

    std::vector<int> blCount(llargariaMax + 1, 0);
    for (int i = 0; i < vecTriplets.size(); ++i){
        blCount[vecTriplets[i].longitud]++;
    }

    std::vector<int> properCodi(llargariaMax, 0);
    int codi = 0;
    for (int i = 1; i <= llargariaMax; ++i){
        codi = (codi + blCount[i-1]) << 1;
        properCodi[i] = codi;
    }

    for (int i = 0; i < vecTriplets.size(); ++i){
        vecTriplets[i].codi = properCodi[vecTriplets[i].longitud]++;
    }

    //for (int i = 0; i < vecTriplets.size(); ++i) std::cout << vecTriplets[i].paraula << " - " <<  vecTriplets[i].longitud << " - " << std::bitset<11>(vecTriplets[i].codi) << std::endl; 

    if (cas < textosPla.size()){
        // de texte pla a binari
    }
    else{
        // de binari a texte pla
        cas = (cas - textosPla.size()) % codisPla.size();
        for (int i = 0, numero = 0, longitud = 0; i < codisPla[cas].size(); ++i){
            numero *= 2;
            if (codisPla[cas][i] == '1') numero++;
            longitud++;

            //std::cout << std::bitset<8>(numero) << std::endl;

            for (int j = 0; j < vecTriplets.size(); ++j){
                if (numero == vecTriplets[j].codi and longitud == vecTriplets[j].longitud){
                    std::cout << vecTriplets[j].paraula;
                    //std::cout << "<" << vecTriplets[j].paraula << ">" << std::endl;
                    numero = 0;
                    longitud = 0;
                    break;
                }
            }
        }
        std::cout << std::endl;
    }
}